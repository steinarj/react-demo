{"version":3,"sources":["components/NavBar.js","components/Course.js","components/CourseList.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","AppBar","position","Toolbar","Typography","variant","color","Course","props","console","log","course","Card","CardMedia","style","height","paddingTop","image","fields","file","url","CardContent","gutterBottom","component","title","description","CardActions","Button","size","href","target","client","contentful","space","accessToken","CoursesList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","courses","searchString","getCourses","getEntries","content_type","query","then","response","setState","items","catch","error","onSearchInputChange","event","value","TextField","padding","id","placeholder","margin","onChange","Grid","container","spacing","map","currentCourse","key","item","xs","sm","lg","xl","components_Course","Component","App","Fragment","components_NavBar","CourseList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea41ddb1.chunk.js","sourcesContent":["import React from 'react'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst NavBar = () => {\r\n    return(\r\n        <div>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h5\" color=\"inherit\">\r\n                        React & Material-UI Sample Application\r\n                    </Typography>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n}\r\nexport default NavBar;","import React from 'react'\r\nimport Card from '@material-ui/core/Card'\r\nimport CardActions from '@material-ui/core/CardActions'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport CardMedia from '@material-ui/core/CardMedia'\r\nimport Button from '@material-ui/core/Button'\r\nimport Typography from '@material-ui/core/Typography'\r\nconst Course = (props) => {\r\n    console.log(props)\r\n\r\n    return(\r\n        <div>\r\n            { props.course ? (\r\n                <Card >\r\n                    <CardMedia style={{height: 0, paddingTop: '56.25%'}}\r\n                               image={props.course.fields.image.fields.file.url}\r\n\r\n                    />\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h6\" component=\"h2\">\r\n                            {props.course.fields.title}\r\n                        </Typography>\r\n                        <Typography variant=\"body1\">\r\n                            {props.course.fields.description}\r\n                        </Typography>\r\n                    </CardContent>\r\n                    <CardActions>\r\n                        <Button size=\"small\" color=\"primary\" href={props.course.fields.url} target=\"_blank\">\r\n                            Go To Course\r\n                        </Button>\r\n                    </CardActions>\r\n                </Card>\r\n            ) : null}\r\n        </div>\r\n    )\r\n}\r\nexport default Course","import React, { Component } from 'react'\r\nimport Grid from '@material-ui/core/Grid';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport * as contentful from 'contentful'\r\nimport Course from '../components/Course'\r\nconst SPACE_ID = '4pmdthl82s0k'\r\nconst ACCESS_TOKEN = '56O4RVncdTvZv7esHJc7zoqqr1X4-DwCAZ_3U8-1PfU'\r\nconst client = contentful.createClient({\r\n    space: SPACE_ID,\r\n    accessToken: ACCESS_TOKEN\r\n})\r\nclass CoursesList extends Component {\r\n    state = {\r\n        courses: [],\r\n        searchString: ''\r\n    }\r\n    constructor() {\r\n        super()\r\n        this.getCourses()\r\n    }\r\n    getCourses = () => {\r\n        client.getEntries({\r\n            content_type: 'courses',\r\n            query: this.state.searchString\r\n        })\r\n            .then((response) => {\r\n                this.setState({courses: response.items})\r\n                console.log(this.state.courses)\r\n            })\r\n            .catch((error) => {\r\n                console.log(\"Error occurred while fetching Entries\")\r\n                console.error(error)\r\n            })\r\n    }\r\n    onSearchInputChange = (event) => {\r\n        console.log(\"Search changed ...\" + event.target.value)\r\n        if (event.target.value) {\r\n            this.setState({searchString: event.target.value})\r\n        } else {\r\n            this.setState({searchString: ''})\r\n        }\r\n        this.getCourses()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                { this.state.courses ? (\r\n                    <div>\r\n                        <TextField style={{padding: 10}}\r\n                                   id=\"searchInput\"\r\n                                   placeholder=\"Search for Courses\"\r\n                                   margin=\"normal\"\r\n                                   onChange={this.onSearchInputChange}\r\n                                    />\r\n                        <Grid container spacing={10} style={{padding: 24}}>\r\n                            { this.state.courses.map(currentCourse => (\r\n                                <Grid key={currentCourse} item xs={12} sm={6} lg={4} xl={3}>\r\n                                    <Course course={currentCourse} />\r\n                                </Grid>\r\n                            ))}\r\n                        </Grid>\r\n                    </div>\r\n                ) : \"No courses found\" }\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default CoursesList;","import React from 'react';\nimport NavBar from './components/NavBar'\nimport CoursesList from \"./components/CourseList\"\n\nfunction App() {\n  return (\n      <>\n          <NavBar />\n          <CoursesList/>\n      </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}